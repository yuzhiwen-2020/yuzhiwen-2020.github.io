---
title: 链路追踪
date: 2023-10-19 09:00:00 +0800
categories: [jaeger,opentelemetry]
tags: [链路追踪, 选型]
author: elon
mermaid: true
---
# 链路追踪(一)
![图片](/assets/imgs/k8s/traceing/1三个指标.png?w=10&h=14)
可观测的三大指标，我们之前调研了log的EFK方案（Fluentd），本次调研实现trace，业界有很多成熟方案可选择，经过对比和考虑未来metric的方案，我们采用opentelemetry+jager的方式实现

# 什么是链路追踪
可以将一次分布式请求还原成调用链路，并将该请求的调用情况集中展示出来。具体来说，它能够展示各个服务节点上的耗时、请求具体到达哪台机器上、每个服务节点的请求状态等信息。
如下图，用户请求到了不同服务的不同接口，我们想知道整个请求到达的server，每个阶段响应时间等，就是链路追踪
![图片](/assets/imgs/k8s/traceing/1什么是链路追踪.png?w=928&h=233)
# 为什么链路追踪
为了解决分布式系统中难以诊断的问题。通过分布式链路追踪，可以将请求的调用情况集中展示出来，帮助开发人员快速定位错误信息，并找出问题所在。此外，分布式链路追踪还可以提供各个阶段链路耗时、服务依赖关系等信息，通过可视化界面展现出来，使得系统性能更加直观，便于分析和优化。
![图片](/assets/imgs/k8s/traceing/1为什么链路追踪.png?w=973&h=285)
# 业界的方案
## 百花齐放
| |主要支持语言|实现方式|接入方式|数据存储|颗粒度|
|-|-|-|-|-|-|
|Zipkin|java、go、php等|拦截后发送http、mq|基于linked，引入配置|es、mysql、内存等|接口级|
|Jaeger|java、go、php等|拦截请求|拦截、侵入|es、kafka、内存等|接口级|
|Skywalking|java、go、nodejs等|java探针、字节码|字节码，无侵入|es、h2等|服务方法级|

注：以上的都支持OpenTracing
在调研的过程发现，由于云原生、微服务的发展，逐渐出现通用规范的OpenTracing、和google指定的OpenSensus
## 标准出现
### OpenTracing
https://opentracing.io/
除以上zipkin等，还有其他的链路追踪，如cat、Pinpoint（不兼容opentracing），正因为众多的分布式追踪系统通过使用不兼容 API 的应用程序级检测进行实现，导致开发不具有通用性，才诞生了 OpenTracing 规范。位于应用程序/类库和追踪或日志分析程序之间的轻量级标准化层
OpenTracing是CNCF（Cloud Native Computing Foundation projects）的项目，它是一个与厂商无关的API，并提供了一种规范，可以帮助开发人员轻松的在他们的代码上集成tracing。官方提供了Go, JavaScript, Java, Python, Ruby, PHP, Objective-C, C++, C#等语言的支持。它是开发的不属于任何一家公司。事实上有很多公司正在支持OpenTracing，例如：Zipkin和Jaeger都遵循OpenTracing协议
![图片](/assets/imgs/k8s/traceing/1opentracing.png?w=901&h=828)
### OpenCensus
https://opencensus.io/
OpenCensus是Google开源的，作为最早提出Tracing概念的公司，OpenCensus也是Google Dapper的社区版本；OpenSensus是允许你采集应用程序Metrics和分布式Traces，并且支持各种语言的库
通过agent直接发送遥测数据到指定的exporter（jaeger、zipkin等）
![图片](/assets/imgs/k8s/traceing/1opencensus.png?w=723&h=290)
通过引入openCensus collector，做为数据（trace、metrics）中转，实现缓冲、重试后的架构
![图片](/assets/imgs/k8s/traceing/1三合一collector.png?w=898&h=685)

注：以上俩种架构也是我们后续介绍的opentelemetry所借鉴的架构，可见聪明人的想法是相同的😄
### 总结
### 总结
可以很容易分辨出OpenTracing和OpenCensus的差别，主要在于OpenCensus把Metrics包括进来了，不仅可以采集traces，还支持采集metrics，还有一点不同OpenCensus并不是单纯的规范制定，他还把包括数据采集的Agent、Collector
| |trace|metric|log|实现|支持的项目|
|-|-|-|-|-|-|
|OpenTracing|✅|❎|❎|只是定义规范|jaeger、skywalking等|
|OpenCensus|✅|✅|❎|不仅有规范，还有agent、collector实现|自身的多语言实现|

# 我们需要的
## 思考
以上介绍，我们需要哪个呢，考虑以下问题
- 后续我们要考虑metrics的验证工作--openMetrics，这就需要三个不同的系统架构来完成可观测；是否有一种架构可以把三大指标（log、trace、metrics）都统一呢？
- 如果可观测引入三套系统，在稳定、可维护性都带来工作量，是否有统一的架构呢？
- 是否有在跨语言架构上优秀的生态？
- 如果绑定到某个解决方案的厂家，不利于后续的扩展、维护、调整、优化，因此有没有与厂家无关的解决方案？
## 主角出现：
OpenCensus与OpenTracing为了将两者的优点进行整合，宣布将进行合并，两者的合并就是后来赫赫有名：OpenTelemetry ；OpenTelemetry与厂商、平台无关，不提供与可观测性相关的后端服务。可根据用户需求将可观测类数据导出到存储、查询、可视化等不同后端，如 Prometheus、Jaeger 、云厂商服务中。该项目得到了云提供商、厂商和最终用户的广泛行业支持和采用；
注：https://github.com/open-telemetry/opentelemetry-go是go语言的opentelemetry实现，目前go的metrics到了贝塔版本，log还没有开发完成，不过trace是比较成熟的了
![图片](/assets/imgs/k8s/traceing/1三合一.png?w=834&h=542)
|标准|概述|traces| metrics|logs|状态|
|-|-|-|-|-|-|
|OpenTracing|CNCF项目-2015年|✅| | |停止更新|
|OpenCensus|起源Google-2017年|✅|✅| |停止更新|
|OpenMetrics|起源Prometheus社区-2017年| |✅| |持续更新|
|OpenTelemetry|OpenTracing、OpenCensus合并-2019年|✅|✅|✅|蓬勃发展|

![图片](/assets/imgs/k8s/traceing/1collector合一.png?w=516&h=536)
# Opentelemetry
支持11种主流语言（c++、.net、erlang、go、java、js、php、py、ruby、rust、swift）；OpenTelemetry不是像Jaeger、Skywalking、Prometheus这框架具备存储，查询，dashboard的服务。相反，它支持将数据导出到各种开源和商业后端。它提供了一个可插拔的体系结构，因此可以轻松添加附加的技术协议和格式

因为需要追踪跨语言的互操作性。许多语言都带有类型定义，可以在实现中使用，例如用于创建可重用组件的接口。包括可观测客户端内部实现所需要的规范，以及可观测客户端与外部通信所需实现的协议规范。具体包括：
- API：定义 Metrics、Tracing、Logs 数据的类型和操作。
- SDK：定义 API 特定语言实现需求，定义配置、数据处理和导出概念。
- 数据：定义 OpenTelemetry Line Protocol （OTLP）。虽然在 Opentelemetry中组件支持了 Zipkin v2 或 Jaeger Thrift 协议格式的实现，但都以第三方贡献库形式提供。只有 OTLP 是 Opentelemetry 官方原生支持的格式。
## 概念
Otel : 就是otelemetry
Otlp : 导出遥测数据的协议
Otel Collector :搜集otel的sdk或者api发送的数据，在转发到指定目标端
```lua
                                          -----> Jaeger (trace)
App + SDK ---> OpenTelemtry Collector ---|
                                          -----> Prometheus (metrics)
```
traceid :某次请求的请求id，用来串联请求的整个生命周期，直到请求返回
spanid :在某个请求阶段，出现在某个服务的某个接口内部，也即某次请求种的一个片段，这个片段也叫span
trace：通过traceid串联起来的请求路径，就是一次trace，某个span是一次笑的trace，多个traces组成一个trace
![图片](/assets/imgs/k8s/traceing/1span概念.png?w=1059&h=425)
opentelemetry-collector ：核心仓库，用于整合可观测性指标
opentelemetry-collector-contrib ：为第三方提供的统一标准，第三方实现collector的核心仓库
opentelemetry-xxx（黄色）:具体语言的实现
opentelemetry-xxx-instrumentation（绿色） :具体语言的otel情况，实现一体化、开箱即用的第三方otel，如grpc的接入
opentelemetry-xxx-contrib （紫色）:为第三方的一些库提供便捷的方式接入otle库；如针对beego、gin
![图片](/assets/imgs/k8s/traceing/1projects.png?w=1127&h=422)
## OpenTelemetry 支持的数据类型

- Metrics
Metric 是关于一个服务的度量，在运行时捕获。从逻辑上讲，捕获其中一个量度的时刻称为 Metric event，它不仅包含量度本身，还包括获取它的时间和相关元数据。应用和请求指标是可用性和性能的重要指标。自定义指标可以深入了解可用性如何影响用户体验和业务。自定义 Metrics 可以深入理解可用性 Metrics 是如何影响用户体验或业务的。OpenTelemetry 目前定义了三个 Metric 工具：
1. counter: 一个随时间求和的值，可以理解成汽车的里程表，它只会上升。
2. measure: 随时间聚合的值。它表示某个定义范围内的值。
3. observer: 捕捉特定时间点的一组当前值，如车辆中的燃油表。

- Logs
日志是带有时间戳的文本记录，可以是带有元数据结构化的，也可以是非结构化的。虽然每个日志都是独立数据源，但可以附加到 Trace 的 Span 中。日常使用调用时，在进行节点分析时出伴随着也可看到日志。
在 OpenTelemetry 中，任何不属于分布式 Trace 或 Metrics 的数据都是日志。日志通常用于确定问题根因，通常包含有关谁更改了内容以及更改结果的信息。

- Traces
Trace 指单个请求的追踪，请求可以由应用程序发起，也可以由用户发起。分布式 Tracing 是跨网络，跨应用的追踪形式。每个工作单元在 Trace 中被称为 Span，一个 Trace 由一个树形的 Span 组成。Span 表示经过应用程序所设计的服务或组件所做工作的对象，Span 还提供了可用于调试可用性和性能问题的请求、错误和持续时间的 Metrics。Span 包含了一个 Span 上下文，它是一组全局唯一标识符，表示每个 Span 所属的唯一请求。通常我们称之为 TraceID。
- Baggage
除了 Trace 的传播，OpenTelemetry 还提供了 Baggage 来传播键值对。Baggage 用于索引一个服务中的可观察事件，该服务包含同一事务中先前的服务提供的属性，有助于在事件之间建立因果关系。虽然 Baggage 可以用作其他横切关注点的原型，但这种机制主要是为了传递 OpenTelemetry 可观测性系统的值。这些值可以从 Baggage 中消费，并作为度量的附加维度，或日志和跟踪的附加上下文使用。
## OpenTelemetry架构
![图片](/assets/imgs/k8s/traceing/1架构.png?w=905&h=581)
### Otel API
- Tracer API
Tracer API 支持生成spans，可以给span分配一个traceId，也可以选择性地加上时间戳。一个Tracer会给spans打上名称和版本。当查看数据时，名称和版本会与一个Tracer关联，通过这种方式可以追踪生成sapan的插装库。
- Metric API
Metric API提供了多种类型的Metric instruments(桩功能)，如Counters 和Observers。Counters 允许对度量进行计算，Observers允许获取离散时间点上的测量值。例如，可以使用Observers 观察不在Span上下文中出现的数值，如当前CPU负载或磁盘上空闲的字节数。
- Context API
Context API 会在使用相同"context"的spans和traces中添加上下文信息，如W3C Trace Context, Zipkin B3首部, 或 New Relic distributed tracing 首部。此外该API允许跟踪spans是如何在一个系统中传递的。当一个trace从一个处理传递到下一个处理时会更新上下文信息。Metric instruments可以访问当前上下文。
### Otel SDK
OpenTelemetry SDK是OpenTelemetry API的实现。该SDK包含三个部分，与上面的API类似：Tracer, 一个Meter, 和一个shared Context layer
以下为一个sdk的使用例子，可在github上找到
```go
func tracerProvider(url string) (*tracesdk.TracerProvider, error) {
	// Create the Jaeger exporter
	exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(url)))
	if err != nil {
		return nil, err
	}
	tp := tracesdk.NewTracerProvider(
		// Always be sure to batch in production.
		tracesdk.WithBatcher(exp),
		// Record information about this application in a Resource.
		tracesdk.WithResource(resource.NewWithAttributes(
			semconv.SchemaURL,
			semconv.ServiceNameKey.String(service),
			attribute.String("environment", environment),
			attribute.Int64("ID", id),
		)),
	)
	return tp, nil
}
```
### Otel Collector 
OpenTelemetry Collector提供了一种厂商中立的实现，无缝地接收，处理和导出遥测数据。此外，它移除了为支持发送到多个开源或商业后端而使用的开源可观察性数据格式(如Jaeger，Prometheus等)的运行，操作和维护；开发人员无需关注具体实现，但是需要了解collector的配置信息，方便对数据的收集、处理、导出目标进行设置
![图片](/assets/imgs/k8s/traceing/1collector架构.png?w=885&h=482)
#### 配置
以下是collector的关键配置说明，分别对receivers、processes、exports、service进行了介绍
- Receivers
receiver定义了数据如何进入OpenTelemetry Collector。必须配置一个或多个receiver，默认不会配置任何receivers
https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
```yaml
eceivers:
  otlp:
    protocols:
      http:
        endpoint: "localhost:4318"
        cors:
          allowed_origins:
            - http://test.com
            # Origins can have wildcards with *, use * by itself to match any origin.
            - https://*.example.com
          allowed_headers:
            - Example-Header
          max_age: 7200
```
- Processors
Processors运行在数据的接收和导出之间。虽然Processors是可选的，但有时候会建议使用Processors。
一般选择批量处理和内存控制的逻辑模块
https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor
```yaml
processors:
  batch:
  batch/2:
    send_batch_size: 10000
    timeout: 10s
```
- Exporters
exporter指定了如何将数据发往一个或多个后端/目标。必须配置一个或多个exporter，默认不会配置任何exporter。
https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter
```yaml
exporters:
  otlp:
    endpoint: otelcol2:4317
    tls:
      cert_file: file.cert
      key_file: file.key
  otlp/2:
    endpoint: otelcol2:4317
    tls:
      insecure: true
```
- Services
Service部分用于配置OpenTelemetry Collector根据receivers, processors, exporters, 和extensions sections的配置会启用那些特性。service分为两部分：
extensions
extensions包含启用的扩展，
```yaml
service:
      extensions: [health_check, pprof, zpages]
```
pipelines
一个pipeline是一组 receivers, processors, 和exporters的集合。必须在service之外定义每个receiver/processor/exporter的配置，然后将其包含到pipeline中
```yaml
receivers:
  otlp:
    protocols:
      grpc:

exporters: ${file:otlp-exporter.yaml}

service:
  extensions: [ ]
  pipelines:
    traces:
      receivers:  [ otlp ]
      processors: [  ]
      exporters:  [ otlp ]
```
#### 使用
参考官方的例子：
https://github.com/open-telemetry/opentelemetry-go/tree/main/example/otel-collector
将在后面《链路追踪(三)》中通过k8s中部署对应的应用详细介绍，此处暂不做详细说明
## Trace上报
类似我们在介绍OpenCensus架构，otel也有俩种使用方式；直接上报和通过collector上报
- 直接上报
在应用服务直接指向要上报的第三方服务（系统），需要注意的是，指向的第三方是兼容otlp协议的；这种情况Ω类似于直接使用jaeger、skywalking等
![图片](/assets/imgs/k8s/traceing/1简单上报.png?w=902&h=399)
- 通过collector上报
通过collector缓存、多端发送到第三方服务或另一个otel collector
![图片](/assets/imgs/k8s/traceing/1搜集上报.png?w=865&h=437)


对比
直接上报可以快速搭建trace搜集，但如果想调整搜集的架构，比如jaeger调整到skywalking，则需要改动代码；通过collector上报，则是通过标准的tolp输出到collector，如果想调整架构，则只需要在collector的export做出配置修改即可（当然也可以多目标输出）
# TODO
完成trace直接上报链路追踪